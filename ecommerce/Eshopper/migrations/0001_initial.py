# Generated by Django 3.2.7 on 2021-11-26 15:30

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='coupon_used',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('amount', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='user_address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_1', models.CharField(max_length=100)),
                ('address_2', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=45)),
                ('state', models.CharField(max_length=45)),
                ('country', models.CharField(max_length=45)),
                ('zipcode', models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name='user_order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shipping_method', models.IntegerField()),
                ('AWB_NO', models.CharField(max_length=100)),
                ('transaction_id', models.CharField(max_length=100)),
                ('created_date', models.DateField(auto_now_add=True)),
                ('status', models.CharField(choices=[('P', 'Pending'), ('S', 'Shipped'), ('D', 'Delivered'), ('PR', 'Processing')], max_length=20)),
                ('grand_total', models.FloatField(blank=True, null=True)),
                ('shipping_charges', models.FloatField(null=True)),
                ('billing_address_1', models.CharField(default='default', max_length=100)),
                ('billing_address_2', models.CharField(blank=True, max_length=100, null=True)),
                ('billing_city', models.CharField(max_length=45)),
                ('billing_state', models.CharField(max_length=45)),
                ('billing_country', models.CharField(max_length=45)),
                ('billing_zipcode', models.CharField(max_length=45)),
                ('shipping_address_1', models.CharField(max_length=100)),
                ('shipping_address_2', models.CharField(blank=True, max_length=100, null=True)),
                ('shipping_city', models.CharField(max_length=45)),
                ('shipping_state', models.CharField(max_length=45)),
                ('shipping_country', models.CharField(max_length=45)),
                ('shipping_zipcode', models.CharField(max_length=45)),
            ],
        ),
        migrations.CreateModel(
            name='user_wish_list',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=100, unique=True)),
                ('phone_number', models.CharField(default='123', max_length=100)),
                ('birth_date', models.DateField(blank=True, default='2021-01-01', null=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Deactive', 'Deactive')], max_length=15)),
                ('registration_method', models.CharField(choices=[('fb', 'Facebook'), ('Twitter', 'Twitter'), ('Google', 'Google')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
